package com.william.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.william.model.Product;
import com.william.model.ProductExample.Criteria;
import com.william.model.ProductExample.Criterion;
import com.william.model.ProductExample;
import java.util.List;
import java.util.Map;

public class ProductSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table products
     *
     * @mbggenerated Sat Mar 18 23:41:51 CST 2017
     */
    public String countByExample(ProductExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("products");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table products
     *
     * @mbggenerated Sat Mar 18 23:41:51 CST 2017
     */
    public String deleteByExample(ProductExample example) {
        BEGIN();
        DELETE_FROM("products");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table products
     *
     * @mbggenerated Sat Mar 18 23:41:51 CST 2017
     */
    public String insertSelective(Product record) {
        BEGIN();
        INSERT_INTO("products");
        
        if (record.getId() != null) {
            VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getCategoryId() != null) {
            VALUES("category_id", "#{categoryId,jdbcType=INTEGER}");
        }
        
        if (record.getIsbn() != null) {
            VALUES("isbn", "#{isbn,jdbcType=CHAR}");
        }
        
        if (record.getName() != null) {
            VALUES("name", "#{name,jdbcType=VARCHAR}");
        }
        
        if (record.getPhoto() != null) {
            VALUES("photo", "#{photo,jdbcType=VARCHAR}");
        }
        
        if (record.getPublisher() != null) {
            VALUES("publisher", "#{publisher,jdbcType=VARCHAR}");
        }
        
        if (record.getPrice() != null) {
            VALUES("price", "#{price,jdbcType=DECIMAL}");
        }
        
        if (record.getOriginalPrice() != null) {
            VALUES("original_price", "#{originalPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getAuthor() != null) {
            VALUES("author", "#{author,jdbcType=VARCHAR}");
        }
        
        if (record.getPoints() != null) {
            VALUES("points", "#{points,jdbcType=INTEGER}");
        }
        
        if (record.getMinimum() != null) {
            VALUES("minimum", "#{minimum,jdbcType=SMALLINT}");
        }
        
        if (record.getSortOrder() != null) {
            VALUES("sort_order", "#{sortOrder,jdbcType=INTEGER}");
        }
        
        if (record.getSubstract() != null) {
            VALUES("substract", "#{substract,jdbcType=TINYINT}");
        }
        
        if (record.getStatus() != null) {
            VALUES("status", "#{status,jdbcType=TINYINT}");
        }
        
        if (record.getSold() != null) {
            VALUES("sold", "#{sold,jdbcType=INTEGER}");
        }
        
        if (record.getMonthSold() != null) {
            VALUES("month_sold", "#{monthSold,jdbcType=INTEGER}");
        }
        
        if (record.getStoreId() != null) {
            VALUES("store_id", "#{storeId,jdbcType=INTEGER}");
        }
        
        if (record.getCreatedAt() != null) {
            VALUES("created_at", "#{createdAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatedAt() != null) {
            VALUES("updated_at", "#{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getDeletedAt() != null) {
            VALUES("deleted_at", "#{deletedAt,jdbcType=TIMESTAMP}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table products
     *
     * @mbggenerated Sat Mar 18 23:41:51 CST 2017
     */
    public String selectByExample(ProductExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("id");
        } else {
            SELECT("id");
        }
        SELECT("category_id");
        SELECT("isbn");
        SELECT("name");
        SELECT("photo");
        SELECT("publisher");
        SELECT("price");
        SELECT("original_price");
        SELECT("author");
        SELECT("points");
        SELECT("minimum");
        SELECT("sort_order");
        SELECT("substract");
        SELECT("status");
        SELECT("sold");
        SELECT("month_sold");
        SELECT("store_id");
        SELECT("created_at");
        SELECT("updated_at");
        SELECT("deleted_at");
        FROM("products");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table products
     *
     * @mbggenerated Sat Mar 18 23:41:51 CST 2017
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        Product record = (Product) parameter.get("record");
        ProductExample example = (ProductExample) parameter.get("example");
        
        BEGIN();
        UPDATE("products");
        
        if (record.getId() != null) {
            SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getCategoryId() != null) {
            SET("category_id = #{record.categoryId,jdbcType=INTEGER}");
        }
        
        if (record.getIsbn() != null) {
            SET("isbn = #{record.isbn,jdbcType=CHAR}");
        }
        
        if (record.getName() != null) {
            SET("name = #{record.name,jdbcType=VARCHAR}");
        }
        
        if (record.getPhoto() != null) {
            SET("photo = #{record.photo,jdbcType=VARCHAR}");
        }
        
        if (record.getPublisher() != null) {
            SET("publisher = #{record.publisher,jdbcType=VARCHAR}");
        }
        
        if (record.getPrice() != null) {
            SET("price = #{record.price,jdbcType=DECIMAL}");
        }
        
        if (record.getOriginalPrice() != null) {
            SET("original_price = #{record.originalPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getAuthor() != null) {
            SET("author = #{record.author,jdbcType=VARCHAR}");
        }
        
        if (record.getPoints() != null) {
            SET("points = #{record.points,jdbcType=INTEGER}");
        }
        
        if (record.getMinimum() != null) {
            SET("minimum = #{record.minimum,jdbcType=SMALLINT}");
        }
        
        if (record.getSortOrder() != null) {
            SET("sort_order = #{record.sortOrder,jdbcType=INTEGER}");
        }
        
        if (record.getSubstract() != null) {
            SET("substract = #{record.substract,jdbcType=TINYINT}");
        }
        
        if (record.getStatus() != null) {
            SET("status = #{record.status,jdbcType=TINYINT}");
        }
        
        if (record.getSold() != null) {
            SET("sold = #{record.sold,jdbcType=INTEGER}");
        }
        
        if (record.getMonthSold() != null) {
            SET("month_sold = #{record.monthSold,jdbcType=INTEGER}");
        }
        
        if (record.getStoreId() != null) {
            SET("store_id = #{record.storeId,jdbcType=INTEGER}");
        }
        
        if (record.getCreatedAt() != null) {
            SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatedAt() != null) {
            SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getDeletedAt() != null) {
            SET("deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table products
     *
     * @mbggenerated Sat Mar 18 23:41:51 CST 2017
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("products");
        
        SET("id = #{record.id,jdbcType=INTEGER}");
        SET("category_id = #{record.categoryId,jdbcType=INTEGER}");
        SET("isbn = #{record.isbn,jdbcType=CHAR}");
        SET("name = #{record.name,jdbcType=VARCHAR}");
        SET("photo = #{record.photo,jdbcType=VARCHAR}");
        SET("publisher = #{record.publisher,jdbcType=VARCHAR}");
        SET("price = #{record.price,jdbcType=DECIMAL}");
        SET("original_price = #{record.originalPrice,jdbcType=DECIMAL}");
        SET("author = #{record.author,jdbcType=VARCHAR}");
        SET("points = #{record.points,jdbcType=INTEGER}");
        SET("minimum = #{record.minimum,jdbcType=SMALLINT}");
        SET("sort_order = #{record.sortOrder,jdbcType=INTEGER}");
        SET("substract = #{record.substract,jdbcType=TINYINT}");
        SET("status = #{record.status,jdbcType=TINYINT}");
        SET("sold = #{record.sold,jdbcType=INTEGER}");
        SET("month_sold = #{record.monthSold,jdbcType=INTEGER}");
        SET("store_id = #{record.storeId,jdbcType=INTEGER}");
        SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        SET("deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP}");
        
        ProductExample example = (ProductExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table products
     *
     * @mbggenerated Sat Mar 18 23:41:51 CST 2017
     */
    public String updateByPrimaryKeySelective(Product record) {
        BEGIN();
        UPDATE("products");
        
        if (record.getCategoryId() != null) {
            SET("category_id = #{categoryId,jdbcType=INTEGER}");
        }
        
        if (record.getIsbn() != null) {
            SET("isbn = #{isbn,jdbcType=CHAR}");
        }
        
        if (record.getName() != null) {
            SET("name = #{name,jdbcType=VARCHAR}");
        }
        
        if (record.getPhoto() != null) {
            SET("photo = #{photo,jdbcType=VARCHAR}");
        }
        
        if (record.getPublisher() != null) {
            SET("publisher = #{publisher,jdbcType=VARCHAR}");
        }
        
        if (record.getPrice() != null) {
            SET("price = #{price,jdbcType=DECIMAL}");
        }
        
        if (record.getOriginalPrice() != null) {
            SET("original_price = #{originalPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getAuthor() != null) {
            SET("author = #{author,jdbcType=VARCHAR}");
        }
        
        if (record.getPoints() != null) {
            SET("points = #{points,jdbcType=INTEGER}");
        }
        
        if (record.getMinimum() != null) {
            SET("minimum = #{minimum,jdbcType=SMALLINT}");
        }
        
        if (record.getSortOrder() != null) {
            SET("sort_order = #{sortOrder,jdbcType=INTEGER}");
        }
        
        if (record.getSubstract() != null) {
            SET("substract = #{substract,jdbcType=TINYINT}");
        }
        
        if (record.getStatus() != null) {
            SET("status = #{status,jdbcType=TINYINT}");
        }
        
        if (record.getSold() != null) {
            SET("sold = #{sold,jdbcType=INTEGER}");
        }
        
        if (record.getMonthSold() != null) {
            SET("month_sold = #{monthSold,jdbcType=INTEGER}");
        }
        
        if (record.getStoreId() != null) {
            SET("store_id = #{storeId,jdbcType=INTEGER}");
        }
        
        if (record.getCreatedAt() != null) {
            SET("created_at = #{createdAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatedAt() != null) {
            SET("updated_at = #{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getDeletedAt() != null) {
            SET("deleted_at = #{deletedAt,jdbcType=TIMESTAMP}");
        }
        
        WHERE("id = #{id,jdbcType=INTEGER}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table products
     *
     * @mbggenerated Sat Mar 18 23:41:51 CST 2017
     */
    protected void applyWhere(ProductExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}